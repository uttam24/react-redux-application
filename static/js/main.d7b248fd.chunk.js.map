{"version":3,"sources":["components/Button.js","components/Counter.js","App.js","actions/counter.action.js","reportWebVitals.js","reducers/counter.reducer.js","reducers/index.js","store.js","index.js"],"names":["Button","onClick","name","Counter","count","useSelector","state","App","dispatch","useDispatch","className","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","appReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNACe,SAASA,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,QAASC,EAAM,EAANA,KACzC,OAAO,wBAAQD,QAASA,EAAjB,SAA2BC,I,WCUnBC,MATf,WAEI,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAEzC,OACI,4BAAIA,KCsBGG,MAtBf,WAEE,IAAMC,EAAWC,cAUjB,OACE,sBAAKC,UAAU,MAAf,UACE,yDACA,cAAC,EAAD,IACA,cAACV,EAAD,CAAQE,KAAM,IAAKD,QAZvB,WACEO,ECXM,CACFG,KAAK,iBDsBP,cAACX,EAAD,CAAQE,KAAM,IAAKD,QATvB,WACEO,ECRM,CACFG,KAAK,qBCEEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCOCQ,EAZQ,WAAsB,IAArBf,EAAoB,uDAAd,EAAGgB,EAAW,uCAExC,OAAOA,EAAOX,MACV,IAAK,YACD,OAAOL,EAAQ,EACnB,IAAK,YACA,OAAOA,EAAO,EACnB,QACI,OAAOA,ICHJiB,EAJIC,YAAgB,CAC/BpB,MAAMiB,ICGKI,EAHDC,YAAYH,GCK1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFK,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.d7b248fd.chunk.js","sourcesContent":["\r\nexport default function Button({onClick, name}){\r\nreturn <button onClick={onClick}>{name}</button>\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Counter(){\r\n     \r\n    const count = useSelector(state => state.count);\r\n\r\n    return(\r\n        <p>{count}</p>\r\n    )\r\n}\r\n\r\nexport default Counter","import React from 'react'\nimport './App.css';\nimport Button from './components/Button';\nimport Counter from './components/Counter';\nimport {increment, decrement} from './actions/counter.action'\nimport { useDispatch } from 'react-redux';\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n  function onIncClick() {\n    dispatch(increment())\n  }\n\n  function onDecClick(){\n    dispatch(decrement())\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>First Redux Application</h1>\n      <Counter/>\n      <Button name={\"+\"} onClick={onIncClick}/>\n      <Button name={\"-\"} onClick={onDecClick}/> \n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport function increment(){\r\n    return{\r\n        type:'INCREMENT'\r\n    }\r\n}\r\n\r\n\r\nexport function decrement(){\r\n    return{\r\n        type:'DECREMENT'\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst counterReducer = (state=0, action) => {\r\n\r\n    switch(action.type){\r\n        case 'INCREMENT':\r\n            return state + 1\r\n        case \"DECREMENT\":\r\n             return state -1\r\n        default:\r\n            return state    \r\n    }\r\n}\r\n\r\nexport default counterReducer","import { combineReducers } from \"redux\";\r\nimport counterReducer from \"./counter.reducer\";\r\n\r\nconst appReducer = combineReducers({\r\n    count:counterReducer\r\n})\r\n\r\nexport default appReducer","import {createStore} from 'redux'; \r\nimport appReducer from \"./reducers\";\r\n\r\n\r\nconst store = createStore(appReducer)\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}